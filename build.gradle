plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "3.0.5"
    id "io.spring.dependency-management" version "1.1.0"
}

group = "com.io"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = "17"
}

jacoco {
    toolVersion = "0.8.9"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.github.ulisesbocchio:jasypt-spring-boot:3.0.4"

    implementation "commons-io:commons-io:2.11.0"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "com.google.guava:guava:31.1-jre"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly "org.projectlombok:lombok"
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
}

compileJava {
    dependsOn clean
}

test {
    dependsOn clean
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    finalizedBy 'jacocoTestReport'
}

afterEvaluate {
    jacocoTestReport {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/io/realworldjpa/domain/article/model/**',
                    'com/io/realworldjpa/domain/user/model/**',
                    'com/io/realworldjpa/global/util/**',
                    'com/io/realworldjpa/RealworldJpaApplication.class'
            ])
        }))
    }
    jacocoTestCoverageVerification {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/io/realworldjpa/domain/article/model/**',
                    'com/io/realworldjpa/domain/user/model/**',
                    'com/io/realworldjpa/global/util/**',
                    'com/io/realworldjpa/RealworldJpaApplication.class'
            ])
        }))
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true

        finalizedBy 'jacocoTestCoverageVerification'
    }
}

jacocoTestCoverageVerification {
    violationRules {
        // For Instruction Coverage - 실행되지 않은 코드의 양.
        rule {
            enabled = true
            element = "CLASS"
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.70
            }
        }

        // For Branch Coverage - 실행되지 않은 분기 수.
        rule {
            enabled = false
            element = "CLASS"
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.50
            }
        }

        // For Line Coverage - 소스 코드의 어느 줄이 실행되었는지.
        rule {
            enabled = true
            element = "CLASS"
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.70
            }
        }

        // For Cyclomatic Complexity - 메서드나 클래스의 복잡도. (일반적으로 높은 복잡도는 테스트하기 어려운 코드를 의미.)
        rule {
            enabled = true
            element = "CLASS"
            limit {
                counter = "COMPLEXITY"
                value = "COVEREDRATIO"
                minimum = 0.75
            }
        }
    }
}
